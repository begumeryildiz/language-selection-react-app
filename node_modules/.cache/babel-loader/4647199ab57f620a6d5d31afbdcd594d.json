{"ast":null,"code":"var _jsxFileName = \"/Users/begum/My-Projects/Fietslabyrint/fietslabyrint-app/src/components/MultilanguageDirection.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport data from \"./data/languages_all.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MultilanguageDirection() {\n  _s();\n  const [language, setLanguage] = useState(\"default\");\n  const [direction, setDirection] = useState(\"\");\n  const [buttonText, setButtonText] = useState(\"\");\n\n  //const languages = data[\"allLanguages\"].split(\"-\").map((element)=> element === \"en\" ? \"default\" : element)\n  const languages = data[\"textSoftware\"].filter(v)[0][\"item\"].map(element => element.lang);\n  const wordMap = new Map(data[\"textSoftware\"].map(value => {\n    const textId = value[\"text_id\"];\n    const choices = new Map(value[\"item\"].map(obj => [obj.lang, obj.text]));\n    return [textId, choices];\n  }));\n  console.log(languages);\n  const selectLanguage = () => {\n    const randomLanguage = languages[Math.floor(Math.random() * languages.length)];\n    setLanguage(randomLanguage);\n  };\n  useEffect(() => {\n    let buttonText = language + \"/\" + wordMap.get(\"nameOfLanguage\").get(language);\n    setButtonText(buttonText);\n  }, [language]);\n  function handleClick() {\n    selectLanguage();\n  }\n  ;\n  useEffect(() => {\n    selectLanguage();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: wordMap.get(\"direction\").get(language)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(MultilanguageDirection, \"JrBSbY9zY61Uq22SwAY/RoR/OZw=\");\n_c = MultilanguageDirection;\nexport default MultilanguageDirection;\nvar _c;\n$RefreshReg$(_c, \"MultilanguageDirection\");","map":{"version":3,"names":["useEffect","useState","data","MultilanguageDirection","language","setLanguage","direction","setDirection","buttonText","setButtonText","languages","filter","v","map","element","lang","wordMap","Map","value","textId","choices","obj","text","console","log","selectLanguage","randomLanguage","Math","floor","random","length","get","handleClick"],"sources":["/Users/begum/My-Projects/Fietslabyrint/fietslabyrint-app/src/components/MultilanguageDirection.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport data from \"./data/languages_all.json\";\n\n\nfunction MultilanguageDirection() {\n    const [language, setLanguage] = useState(\"default\");\n    const [direction, setDirection] = useState(\"\");\n    const [buttonText, setButtonText] = useState(\"\");\n\n    //const languages = data[\"allLanguages\"].split(\"-\").map((element)=> element === \"en\" ? \"default\" : element)\n    const languages = data[\"textSoftware\"].filter(v)[0][\"item\"].map(element => element.lang)\n\n    const wordMap = new Map(data[\"textSoftware\"].map(\n        (value) => {\n            const textId = value[\"text_id\"];\n            const choices = new Map(value[\"item\"].map((obj) => [obj.lang, obj.text]));\n            return [textId, choices];\n        }\n    ));\n\n    \n\n    console.log(languages)\n\n\n    const selectLanguage = () => {\n        const randomLanguage = languages[Math.floor(Math.random() * languages.length)];\n        setLanguage(randomLanguage)\n    };\n\n    useEffect(() => {\n        let buttonText = language+\"/\"+wordMap.get(\"nameOfLanguage\").get(language)\n        setButtonText(buttonText);\n    }, [language]);\n\n    function handleClick() {\n        selectLanguage()\n    };\n\n    useEffect(() => {\n        selectLanguage();\n    }, []);\n\n    return (\n        <div>\n             <button onClick={handleClick}>{buttonText}</button>\n             <span>{wordMap.get(\"direction\").get(language)}</span>\n        </div>\n    );\n}\n\nexport default MultilanguageDirection;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,2BAA2B;AAAC;AAG7C,SAASC,sBAAsB,GAAG;EAAA;EAC9B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,SAAS,CAAC;EACnD,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMS,SAAS,GAAGR,IAAI,CAAC,cAAc,CAAC,CAACS,MAAM,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAACC,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;EAExF,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAACf,IAAI,CAAC,cAAc,CAAC,CAACW,GAAG,CAC3CK,KAAK,IAAK;IACP,MAAMC,MAAM,GAAGD,KAAK,CAAC,SAAS,CAAC;IAC/B,MAAME,OAAO,GAAG,IAAIH,GAAG,CAACC,KAAK,CAAC,MAAM,CAAC,CAACL,GAAG,CAAEQ,GAAG,IAAK,CAACA,GAAG,CAACN,IAAI,EAAEM,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;IACzE,OAAO,CAACH,MAAM,EAAEC,OAAO,CAAC;EAC5B,CAAC,CACJ,CAAC;EAIFG,OAAO,CAACC,GAAG,CAACd,SAAS,CAAC;EAGtB,MAAMe,cAAc,GAAG,MAAM;IACzB,MAAMC,cAAc,GAAGhB,SAAS,CAACiB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGnB,SAAS,CAACoB,MAAM,CAAC,CAAC;IAC9EzB,WAAW,CAACqB,cAAc,CAAC;EAC/B,CAAC;EAED1B,SAAS,CAAC,MAAM;IACZ,IAAIQ,UAAU,GAAGJ,QAAQ,GAAC,GAAG,GAACY,OAAO,CAACe,GAAG,CAAC,gBAAgB,CAAC,CAACA,GAAG,CAAC3B,QAAQ,CAAC;IACzEK,aAAa,CAACD,UAAU,CAAC;EAC7B,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,SAAS4B,WAAW,GAAG;IACnBP,cAAc,EAAE;EACpB;EAAC;EAEDzB,SAAS,CAAC,MAAM;IACZyB,cAAc,EAAE;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAA,wBACK;MAAQ,OAAO,EAAEO,WAAY;MAAA,UAAExB;IAAU;MAAA;MAAA;MAAA;IAAA,QAAU,eACnD;MAAA,UAAOQ,OAAO,CAACe,GAAG,CAAC,WAAW,CAAC,CAACA,GAAG,CAAC3B,QAAQ;IAAC;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACpD;AAEd;AAAC,GA7CQD,sBAAsB;AAAA,KAAtBA,sBAAsB;AA+C/B,eAAeA,sBAAsB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}